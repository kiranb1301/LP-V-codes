import tensorflow as tf
from tensorflow.keras import layers, models
from sklearn.datasets import load_boston
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
import numpy as np

# 1. Load the Boston Housing dataset
boston = load_boston()
X = boston.data  # Features
y = boston.target  # Target (prices)

# 2. Preprocess the Data (Standardize the features)
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 3. Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 4. Define the Deep Neural Network Model for Linear Regression
model = models.Sequential([
    layers.Dense(64, activation='relu', input_dim=X_train.shape[1]),
    layers.Dense(64, activation='relu'),
    layers.Dense(1)  # Output layer with 1 unit for continuous prediction
])

# 5. Compile the model
model.compile(optimizer='adam', loss='mean_squared_error')

# 6. Train the model
history = model.fit(X_train, y_train, epochs=100, batch_size=32, validation_split=0.2, verbose=1)

# 7. Evaluate the model on the test set
test_loss = model.evaluate(X_test, y_test)
print(f"Test Loss (MSE): {test_loss}")

# 8. Predict on the test data
y_pred = model.predict(X_test)

# 9. Visualize the Predictions
plt.scatter(y_test, y_pred)
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.title("Actual vs Predicted Housing Prices")
plt.show()

# 10. Print a few predictions vs actual values
for i in range(10):
    print(f"Actual: {y_test[i]}, Predicted: {y_pred[i][0]}")
